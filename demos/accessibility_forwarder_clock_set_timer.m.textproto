# Copyright 2023 SJTU X-Lance Lab
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Revised by Danyang Zhang @X-Lance based on
# 
# Copyright 2021 DeepMind Technologies Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# proto-file: android_env/proto/task.proto
# proto-message: android_env.Task

id: "accessibility_forwarder_clock_set_timer"
name: "AccessibilityForwarderClock - set timer task"
description: "Press the `RESET` button in the timer of the Android Clock app."

setup_steps: [
  {
    adb_call: {
      install_apk: {
        filesystem: {
          path: "accessibility_forwarder.apk"
        }
      }
    }
    success_condition: {
      check_install: {
        package_name: "com.google.androidenv.accessibilityforwarder"
        timeout_sec: 10.0
      }
    }
  },
  {
     sleep: { time_sec: 3.0 } },
  {
    adb_call: {
      start_accessibility_service: {
        full_service: "com.google.androidenv.accessibilityforwarder/com.google.androidenv.accessibilityforwarder.AccessibilityForwarder"
      }
    }
  },
  {
    sleep: { time_sec: 3.0 } },
  {
    adb_call: { rotate: { orientation: PORTRAIT_0 } } }

]

reset_steps: [
  { adb_call: { force_stop: { package_name: "com.google.android.deskclock" } } },
  { adb_call: { clear_cache: { package_name: "com.google.android.deskclock" } } },
  {
    adb_call: {
      start_activity: {
        full_activity: 'com.google.android.deskclock/com.android.deskclock.DeskClock'
      }
    }
    success_condition: {
      wait_for_app_screen: {
        app_screen: {
          activity: 'com.google.android.deskclock/com.android.deskclock.DeskClock'
          view_hierarchy_path: [
          ]
        }
        timeout_sec: 10.0
      }
      num_retries: 10
    }
  }
]

expected_app_screen: {
  activity: 'com.google.android.deskclock/com.android.deskclock.DeskClock'
  view_hierarchy_path: [
  ]
}

max_duration_sec: 60  # 1 minute.

#log_parsing_config: {
#
  #filters: ["AndroidRLTask:V"]
#
  #log_regexps: {
    #episode_end: "^extra: event \\['RESET'\\]$"
    #extra: "^extra: (?P<name>[^ ]*)[ ]?(?P<extra>.*)$"
    #json_extra: "^json_extra: (?P<json_extra>.*)$"
    #reward_event: {
        ## Gives 1 reward if the stopwatch was started and then reset.
        #event: "^extra: event \\['RESET'\\]$"
        #reward: 1
    #}
  #}
#}

event_sources: {
	log_event: {
		filters: ["AndroidRLTask:V"]
		pattern: "^extra: event \\['RESET'\\]$"
	}
	id: 1
	repeatability: UNLIMITED
}
event_sources: {
	log_event: {
		filters: ["AndroidRLTask:V"]
		pattern: "^extra: (?P<name>[^ ]*)[ ]?(?P<extra>.*)$"
	}
	id: 2
	repeatability: UNLIMITED
}
event_sources: {
	log_event: {
		filters: ["AndroidRLTask:V"]
		pattern: "^json_extra: (?P<json_extra>.*)$"
	}
	id: 3
	repeatability: UNLIMITED
}
event_sources: {
	log_event: {
		filters: ["AndroidRLTask:V"]
		pattern: "^extra: event \\['RESET'\\]$"
	}
	id: 4
	repeatability: UNLIMITED
}

event_slots: {
	reward_listener: {
		events: { id: 4 }
		transformation: "y = 1"
	}
	episode_end_listener: { events: { id: 1 } }
	extra_listener: {
		events: { id: 2 }
		transformation: [
			"import ast",
			"y = {x[0]: ast.literal_eval(x[1])}"
		]
	}
	json_extra_listener: {
		events: { id: 3 }
		transformation: ["y = x[0]"]
	}
}

extras_spec: [
  # All of these a returned when any button is pressed
  # Content description of UI element e.g. "Settings"
  { name: "clicks" shape: [1], dtype: STRING_U250 },
  # Text of the accessibility event e.g. button text "Accept & Continue"
  { name: "event" shape: [1], dtype: STRING_U250 }
]

command: "Press the `RESET` button in the timer of the Android Clock app."
